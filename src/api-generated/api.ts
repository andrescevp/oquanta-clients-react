/* tslint:disable */
/* eslint-disable */
/**
 * oQuanta Clients API
 * Internal Private API for oQuanta Clients APP
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * 
     * @type {number}
     * @memberof GenericError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof GenericError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ModelValidationErrorModel
 */
export interface ModelValidationErrorModel {
    /**
     * 
     * @type {Array<ModelValidationErrorPathModel>}
     * @memberof ModelValidationErrorModel
     */
    'errors': Array<ModelValidationErrorPathModel>;
    /**
     * 
     * @type {number}
     * @memberof ModelValidationErrorModel
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ModelValidationErrorModel
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ModelValidationErrorPathModel
 */
export interface ModelValidationErrorPathModel {
    /**
     * 
     * @type {string}
     * @memberof ModelValidationErrorPathModel
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ModelValidationErrorPathModel
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NormalSchedule
 */
export interface NormalSchedule {
    /**
     * 
     * @type {number}
     * @memberof NormalSchedule
     */
    'day'?: number | null;
    /**
     * 
     * @type {Array<NormalSchedulePeriod>}
     * @memberof NormalSchedule
     */
    'periods'?: Array<NormalSchedulePeriod> | null;
}
/**
 * 
 * @export
 * @interface NormalSchedulePeriod
 */
export interface NormalSchedulePeriod {
    /**
     * 
     * @type {string}
     * @memberof NormalSchedulePeriod
     */
    'from'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NormalSchedulePeriod
     */
    'to'?: string | null;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'legalId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'mainContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'secondaryContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'postalCode'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationBasic
 */
export interface OrganizationBasic {
    /**
     * 
     * @type {string}
     * @memberof OrganizationBasic
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationBasic
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationBasic
     */
    'legalId'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationCreate
 */
export interface OrganizationCreate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'legalId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'mainContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'secondaryContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreate
     */
    'postalCode'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationList
 */
export interface OrganizationList {
    /**
     * 
     * @type {Array<Organization>}
     * @memberof OrganizationList
     */
    'results': Array<Organization>;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'lastPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'nextPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'previousPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationList
     */
    'count'?: number | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlace
 */
export interface OrganizationPlace {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'postalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'region'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlace
     */
    'organizationUuid'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceBasic
 */
export interface OrganizationPlaceBasic {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceBasic
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceBasic
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceBasic
     */
    'slug'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceCreate
 */
export interface OrganizationPlaceCreate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'postalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'region'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceCreate
     */
    'organizationUuid': string;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceList
 */
export interface OrganizationPlaceList {
    /**
     * 
     * @type {Array<OrganizationPlaceResource>}
     * @memberof OrganizationPlaceList
     */
    'results': Array<OrganizationPlaceResource>;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceList
     */
    'lastPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceList
     */
    'nextPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceList
     */
    'previousPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceList
     */
    'count'?: number | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceResource
 */
export interface OrganizationPlaceResource {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'longitude': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'latitude': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'postalCode': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceResource
     */
    'organizationUuid'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceSurvey
 */
export interface OrganizationPlaceSurvey {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPlaceSurvey
     */
    'active'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'alias'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'startAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'endAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'subsystem': OrganizationPlaceSurveySubsystemEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'surveyType': OrganizationPlaceSurveySurveyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'surveyOid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'lookerReportEmbedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurvey
     */
    'organizationPlaceUuid'?: string | null;
}

export const OrganizationPlaceSurveySubsystemEnum = {
    Limesurvey: 'limesurvey'
} as const;

export type OrganizationPlaceSurveySubsystemEnum = typeof OrganizationPlaceSurveySubsystemEnum[keyof typeof OrganizationPlaceSurveySubsystemEnum];
export const OrganizationPlaceSurveySurveyTypeEnum = {
    Tracker: 'tracker',
    Campaign: 'campaign'
} as const;

export type OrganizationPlaceSurveySurveyTypeEnum = typeof OrganizationPlaceSurveySurveyTypeEnum[keyof typeof OrganizationPlaceSurveySurveyTypeEnum];

/**
 * 
 * @export
 * @interface OrganizationPlaceSurveyCreate
 */
export interface OrganizationPlaceSurveyCreate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'active'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'alias'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'startAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'endAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'subsystem': OrganizationPlaceSurveyCreateSubsystemEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'surveyType': OrganizationPlaceSurveyCreateSurveyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'surveyOid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyCreate
     */
    'lookerReportEmbedUrl'?: string | null;
}

export const OrganizationPlaceSurveyCreateSubsystemEnum = {
    Limesurvey: 'limesurvey'
} as const;

export type OrganizationPlaceSurveyCreateSubsystemEnum = typeof OrganizationPlaceSurveyCreateSubsystemEnum[keyof typeof OrganizationPlaceSurveyCreateSubsystemEnum];
export const OrganizationPlaceSurveyCreateSurveyTypeEnum = {
    Tracker: 'tracker',
    Campaign: 'campaign'
} as const;

export type OrganizationPlaceSurveyCreateSurveyTypeEnum = typeof OrganizationPlaceSurveyCreateSurveyTypeEnum[keyof typeof OrganizationPlaceSurveyCreateSurveyTypeEnum];

/**
 * 
 * @export
 * @interface OrganizationPlaceSurveyList
 */
export interface OrganizationPlaceSurveyList {
    /**
     * 
     * @type {Array<OrganizationPlaceSurvey>}
     * @memberof OrganizationPlaceSurveyList
     */
    'results': Array<OrganizationPlaceSurvey>;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceSurveyList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceSurveyList
     */
    'lastPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceSurveyList
     */
    'nextPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceSurveyList
     */
    'previousPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPlaceSurveyList
     */
    'count'?: number | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceSurveyUpdate
 */
export interface OrganizationPlaceSurveyUpdate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'active'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'alias'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'startAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'endAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'subsystem': OrganizationPlaceSurveyUpdateSubsystemEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'surveyType': OrganizationPlaceSurveyUpdateSurveyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'surveyOid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceSurveyUpdate
     */
    'lookerReportEmbedUrl'?: string | null;
}

export const OrganizationPlaceSurveyUpdateSubsystemEnum = {
    Limesurvey: 'limesurvey'
} as const;

export type OrganizationPlaceSurveyUpdateSubsystemEnum = typeof OrganizationPlaceSurveyUpdateSubsystemEnum[keyof typeof OrganizationPlaceSurveyUpdateSubsystemEnum];
export const OrganizationPlaceSurveyUpdateSurveyTypeEnum = {
    Tracker: 'tracker',
    Campaign: 'campaign'
} as const;

export type OrganizationPlaceSurveyUpdateSurveyTypeEnum = typeof OrganizationPlaceSurveyUpdateSurveyTypeEnum[keyof typeof OrganizationPlaceSurveyUpdateSurveyTypeEnum];

/**
 * 
 * @export
 * @interface OrganizationPlaceUpdate
 */
export interface OrganizationPlaceUpdate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'postalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPlaceUpdate
     */
    'region'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceWorkingHours
 */
export interface OrganizationPlaceWorkingHours {
    /**
     * 
     * @type {Array<NormalSchedule>}
     * @memberof OrganizationPlaceWorkingHours
     */
    'normalSchedule'?: Array<NormalSchedule>;
    /**
     * 
     * @type {Array<SpecialSchedule>}
     * @memberof OrganizationPlaceWorkingHours
     */
    'specialSchedule'?: Array<SpecialSchedule>;
}
/**
 * 
 * @export
 * @interface OrganizationPlaceWorkingHoursResource
 */
export interface OrganizationPlaceWorkingHoursResource {
    /**
     * 
     * @type {Array<NormalSchedule>}
     * @memberof OrganizationPlaceWorkingHoursResource
     */
    'normalSchedule'?: Array<NormalSchedule>;
    /**
     * 
     * @type {Array<SpecialSchedule>}
     * @memberof OrganizationPlaceWorkingHoursResource
     */
    'specialSchedule'?: Array<SpecialSchedule>;
}
/**
 * 
 * @export
 * @interface OrganizationResource2
 */
export interface OrganizationResource2 {
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'legalId': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'mainContactPhone': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'secondaryContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'contactEmail': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResource2
     */
    'postalCode': string;
}
/**
 * 
 * @export
 * @interface OrganizationUpdate
 */
export interface OrganizationUpdate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'legalId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'mainContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'secondaryContactPhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'postalCode'?: string | null;
}
/**
 * 
 * @export
 * @interface OrganizationUser
 */
export interface OrganizationUser {
    /**
     * 
     * @type {number}
     * @memberof OrganizationUser
     */
    'id'?: number | null;
    /**
     * 
     * @type {User}
     * @memberof OrganizationUser
     */
    'user': User;
    /**
     * 
     * @type {Organization}
     * @memberof OrganizationUser
     */
    'organization': Organization;
    /**
     * 
     * @type {Array<any>}
     * @memberof OrganizationUser
     */
    'roles'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface OrganizationUserBasic
 */
export interface OrganizationUserBasic {
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserBasic
     */
    'id'?: number | null;
    /**
     * 
     * @type {User}
     * @memberof OrganizationUserBasic
     */
    'user': User;
    /**
     * 
     * @type {Organization}
     * @memberof OrganizationUserBasic
     */
    'organization': Organization;
}
/**
 * 
 * @export
 * @interface OrganizationUserCreate
 */
export interface OrganizationUserCreate {
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserCreate
     */
    'userUuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserCreate
     */
    'organizationUuid'?: string | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof OrganizationUserCreate
     */
    'roles'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface OrganizationUserList
 */
export interface OrganizationUserList {
    /**
     * 
     * @type {Array<OrganizationUser>}
     * @memberof OrganizationUserList
     */
    'results': Array<OrganizationUser>;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserList
     */
    'lastPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserList
     */
    'nextPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserList
     */
    'previousPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserList
     */
    'count'?: number | null;
}
/**
 * 
 * @export
 * @interface OrganizationUserRequest
 */
export interface OrganizationUserRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserRequest
     */
    'userUuid': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserRequest
     */
    'organizationUuid': string;
    /**
     * 
     * @type {Array<any>}
     * @memberof OrganizationUserRequest
     */
    'roles'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface OrganizationUserResource
 */
export interface OrganizationUserResource {
    /**
     * 
     * @type {User}
     * @memberof OrganizationUserResource
     */
    'user': User;
    /**
     * 
     * @type {Organization}
     * @memberof OrganizationUserResource
     */
    'organization': Organization;
    /**
     * 
     * @type {Array<any>}
     * @memberof OrganizationUserResource
     */
    'roles'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface OrganizationUserUpdate
 */
export interface OrganizationUserUpdate {
    /**
     * 
     * @type {Array<any>}
     * @memberof OrganizationUserUpdate
     */
    'roles'?: Array<any> | null;
}
/**
 * 
 * @export
 * @interface PatchApiOrganizationPlaceSurveysToggleActivationRequest
 */
export interface PatchApiOrganizationPlaceSurveysToggleActivationRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchApiOrganizationPlaceSurveysToggleActivationRequest
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface SpecialSchedule
 */
export interface SpecialSchedule {
    /**
     * 
     * @type {string}
     * @memberof SpecialSchedule
     */
    'validFrom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecialSchedule
     */
    'validThrough'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecialSchedule
     */
    'opens'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecialSchedule
     */
    'closes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecialSchedule
     */
    'reason'?: string | null;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof User
     */
    'roles'?: Array<any>;
}
/**
 * 
 * @export
 * @interface UserBasic
 */
export interface UserBasic {
    /**
     * 
     * @type {string}
     * @memberof UserBasic
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBasic
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBasic
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBasic
     */
    'lastName'?: string | null;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof UserCreate
     */
    'roles'?: Array<any>;
}
/**
 * 
 * @export
 * @interface UserList
 */
export interface UserList {
    /**
     * 
     * @type {Array<User>}
     * @memberof UserList
     */
    'results': Array<User>;
    /**
     * 
     * @type {number}
     * @memberof UserList
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof UserList
     */
    'lastPage': number;
    /**
     * 
     * @type {number}
     * @memberof UserList
     */
    'nextPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserList
     */
    'previousPage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserList
     */
    'count'?: number | null;
}
/**
 * 
 * @export
 * @interface UserResource2
 */
export interface UserResource2 {
    /**
     * 
     * @type {string}
     * @memberof UserResource2
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResource2
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserResource2
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserResource2
     */
    'lastName': string;
    /**
     * 
     * @type {Array<any>}
     * @memberof UserResource2
     */
    'roles'?: Array<any>;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof UserUpdate
     */
    'roles'?: Array<any>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get JWT token for authentication.
         * @param {Credentials} [credentials] Create new JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthToken: async (credentials?: Credentials, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/login_check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get JWT token for authentication.
         * @param {Credentials} [credentials] Create new JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthToken(credentials?: Credentials, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthToken(credentials, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getAuthToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Get JWT token for authentication.
         * @param {Credentials} [credentials] Create new JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthToken(credentials?: Credentials, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.getAuthToken(credentials, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Get JWT token for authentication.
     * @param {Credentials} [credentials] Create new JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getAuthToken(credentials?: Credentials, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getAuthToken(credentials, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationPlaceSurveysApi - axios parameter creator
 * @export
 */
export const OrganizationPlaceSurveysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationPlaceSurveysDelete: async (placeUuid: string, surveyUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeUuid' is not null or undefined
            assertParamExists('deleteApiOrganizationPlaceSurveysDelete', 'placeUuid', placeUuid)
            // verify required parameter 'surveyUuid' is not null or undefined
            assertParamExists('deleteApiOrganizationPlaceSurveysDelete', 'surveyUuid', surveyUuid)
            const localVarPath = `/api/organization-place/{place_uuid}/surveys/{survey_uuid}`
                .replace(`{${"place_uuid"}}`, encodeURIComponent(String(placeUuid)))
                .replace(`{${"survey_uuid"}}`, encodeURIComponent(String(surveyUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceSurveysGet: async (placeUuid: string, surveyUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeUuid' is not null or undefined
            assertParamExists('getApiOrganizationPlaceSurveysGet', 'placeUuid', placeUuid)
            // verify required parameter 'surveyUuid' is not null or undefined
            assertParamExists('getApiOrganizationPlaceSurveysGet', 'surveyUuid', surveyUuid)
            const localVarPath = `/api/organization-place/{place_uuid}/surveys/{survey_uuid}`
                .replace(`{${"place_uuid"}}`, encodeURIComponent(String(placeUuid)))
                .replace(`{${"survey_uuid"}}`, encodeURIComponent(String(surveyUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationPlaceSurveysListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceSurveysList: async (placeUuid: string, page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlaceSurveysListOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeUuid' is not null or undefined
            assertParamExists('getApiOrganizationPlaceSurveysList', 'placeUuid', placeUuid)
            const localVarPath = `/api/organization-place/{place_uuid}/surveys`
                .replace(`{${"place_uuid"}}`, encodeURIComponent(String(placeUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {PatchApiOrganizationPlaceSurveysToggleActivationRequest} patchApiOrganizationPlaceSurveysToggleActivationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiOrganizationPlaceSurveysToggleActivation: async (placeUuid: string, surveyUuid: string, patchApiOrganizationPlaceSurveysToggleActivationRequest: PatchApiOrganizationPlaceSurveysToggleActivationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeUuid' is not null or undefined
            assertParamExists('patchApiOrganizationPlaceSurveysToggleActivation', 'placeUuid', placeUuid)
            // verify required parameter 'surveyUuid' is not null or undefined
            assertParamExists('patchApiOrganizationPlaceSurveysToggleActivation', 'surveyUuid', surveyUuid)
            // verify required parameter 'patchApiOrganizationPlaceSurveysToggleActivationRequest' is not null or undefined
            assertParamExists('patchApiOrganizationPlaceSurveysToggleActivation', 'patchApiOrganizationPlaceSurveysToggleActivationRequest', patchApiOrganizationPlaceSurveysToggleActivationRequest)
            const localVarPath = `/api/organization-place/{place_uuid}/surveys/{survey_uuid}/toggle-activation`
                .replace(`{${"place_uuid"}}`, encodeURIComponent(String(placeUuid)))
                .replace(`{${"survey_uuid"}}`, encodeURIComponent(String(surveyUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchApiOrganizationPlaceSurveysToggleActivationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {OrganizationPlaceSurveyCreate} organizationPlaceSurveyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationPlaceSurveysCreate: async (placeUuid: string, organizationPlaceSurveyCreate: OrganizationPlaceSurveyCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeUuid' is not null or undefined
            assertParamExists('postApiOrganizationPlaceSurveysCreate', 'placeUuid', placeUuid)
            // verify required parameter 'organizationPlaceSurveyCreate' is not null or undefined
            assertParamExists('postApiOrganizationPlaceSurveysCreate', 'organizationPlaceSurveyCreate', organizationPlaceSurveyCreate)
            const localVarPath = `/api/organization-place/{place_uuid}/surveys`
                .replace(`{${"place_uuid"}}`, encodeURIComponent(String(placeUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationPlaceSurveyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {OrganizationPlaceSurveyUpdate} organizationPlaceSurveyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationPlaceSurveysUpdate: async (placeUuid: string, surveyUuid: string, organizationPlaceSurveyUpdate: OrganizationPlaceSurveyUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeUuid' is not null or undefined
            assertParamExists('putApiOrganizationPlaceSurveysUpdate', 'placeUuid', placeUuid)
            // verify required parameter 'surveyUuid' is not null or undefined
            assertParamExists('putApiOrganizationPlaceSurveysUpdate', 'surveyUuid', surveyUuid)
            // verify required parameter 'organizationPlaceSurveyUpdate' is not null or undefined
            assertParamExists('putApiOrganizationPlaceSurveysUpdate', 'organizationPlaceSurveyUpdate', organizationPlaceSurveyUpdate)
            const localVarPath = `/api/organization-place/{place_uuid}/surveys/{survey_uuid}`
                .replace(`{${"place_uuid"}}`, encodeURIComponent(String(placeUuid)))
                .replace(`{${"survey_uuid"}}`, encodeURIComponent(String(surveyUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationPlaceSurveyUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationPlaceSurveysApi - functional programming interface
 * @export
 */
export const OrganizationPlaceSurveysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationPlaceSurveysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiOrganizationPlaceSurveysDelete(placeUuid: string, surveyUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiOrganizationPlaceSurveysDelete(placeUuid, surveyUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceSurveysApi.deleteApiOrganizationPlaceSurveysDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationPlaceSurveysGet(placeUuid: string, surveyUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceSurvey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationPlaceSurveysGet(placeUuid, surveyUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceSurveysApi.getApiOrganizationPlaceSurveysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationPlaceSurveysListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationPlaceSurveysList(placeUuid: string, page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlaceSurveysListOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceSurveyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationPlaceSurveysList(placeUuid, page, limit, search, sort, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceSurveysApi.getApiOrganizationPlaceSurveysList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {PatchApiOrganizationPlaceSurveysToggleActivationRequest} patchApiOrganizationPlaceSurveysToggleActivationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiOrganizationPlaceSurveysToggleActivation(placeUuid: string, surveyUuid: string, patchApiOrganizationPlaceSurveysToggleActivationRequest: PatchApiOrganizationPlaceSurveysToggleActivationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceSurvey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiOrganizationPlaceSurveysToggleActivation(placeUuid, surveyUuid, patchApiOrganizationPlaceSurveysToggleActivationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceSurveysApi.patchApiOrganizationPlaceSurveysToggleActivation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {OrganizationPlaceSurveyCreate} organizationPlaceSurveyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiOrganizationPlaceSurveysCreate(placeUuid: string, organizationPlaceSurveyCreate: OrganizationPlaceSurveyCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceSurvey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiOrganizationPlaceSurveysCreate(placeUuid, organizationPlaceSurveyCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceSurveysApi.postApiOrganizationPlaceSurveysCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {OrganizationPlaceSurveyUpdate} organizationPlaceSurveyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiOrganizationPlaceSurveysUpdate(placeUuid: string, surveyUuid: string, organizationPlaceSurveyUpdate: OrganizationPlaceSurveyUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceSurvey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiOrganizationPlaceSurveysUpdate(placeUuid, surveyUuid, organizationPlaceSurveyUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceSurveysApi.putApiOrganizationPlaceSurveysUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationPlaceSurveysApi - factory interface
 * @export
 */
export const OrganizationPlaceSurveysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationPlaceSurveysApiFp(configuration)
    return {
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationPlaceSurveysDelete(placeUuid: string, surveyUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApiOrganizationPlaceSurveysDelete(placeUuid, surveyUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceSurveysGet(placeUuid: string, surveyUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceSurvey> {
            return localVarFp.getApiOrganizationPlaceSurveysGet(placeUuid, surveyUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationPlaceSurveysListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceSurveysList(placeUuid: string, page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlaceSurveysListOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceSurveyList> {
            return localVarFp.getApiOrganizationPlaceSurveysList(placeUuid, page, limit, search, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {PatchApiOrganizationPlaceSurveysToggleActivationRequest} patchApiOrganizationPlaceSurveysToggleActivationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiOrganizationPlaceSurveysToggleActivation(placeUuid: string, surveyUuid: string, patchApiOrganizationPlaceSurveysToggleActivationRequest: PatchApiOrganizationPlaceSurveysToggleActivationRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceSurvey> {
            return localVarFp.patchApiOrganizationPlaceSurveysToggleActivation(placeUuid, surveyUuid, patchApiOrganizationPlaceSurveysToggleActivationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {OrganizationPlaceSurveyCreate} organizationPlaceSurveyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationPlaceSurveysCreate(placeUuid: string, organizationPlaceSurveyCreate: OrganizationPlaceSurveyCreate, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceSurvey> {
            return localVarFp.postApiOrganizationPlaceSurveysCreate(placeUuid, organizationPlaceSurveyCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} placeUuid 
         * @param {string} surveyUuid 
         * @param {OrganizationPlaceSurveyUpdate} organizationPlaceSurveyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationPlaceSurveysUpdate(placeUuid: string, surveyUuid: string, organizationPlaceSurveyUpdate: OrganizationPlaceSurveyUpdate, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceSurvey> {
            return localVarFp.putApiOrganizationPlaceSurveysUpdate(placeUuid, surveyUuid, organizationPlaceSurveyUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationPlaceSurveysApi - object-oriented interface
 * @export
 * @class OrganizationPlaceSurveysApi
 * @extends {BaseAPI}
 */
export class OrganizationPlaceSurveysApi extends BaseAPI {
    /**
     * 
     * @param {string} placeUuid 
     * @param {string} surveyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceSurveysApi
     */
    public deleteApiOrganizationPlaceSurveysDelete(placeUuid: string, surveyUuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceSurveysApiFp(this.configuration).deleteApiOrganizationPlaceSurveysDelete(placeUuid, surveyUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} placeUuid 
     * @param {string} surveyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceSurveysApi
     */
    public getApiOrganizationPlaceSurveysGet(placeUuid: string, surveyUuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceSurveysApiFp(this.configuration).getApiOrganizationPlaceSurveysGet(placeUuid, surveyUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} placeUuid 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [search] Search term
     * @param {string} [sort] Field to sort by
     * @param {GetApiOrganizationPlaceSurveysListOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceSurveysApi
     */
    public getApiOrganizationPlaceSurveysList(placeUuid: string, page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlaceSurveysListOrderEnum, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceSurveysApiFp(this.configuration).getApiOrganizationPlaceSurveysList(placeUuid, page, limit, search, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} placeUuid 
     * @param {string} surveyUuid 
     * @param {PatchApiOrganizationPlaceSurveysToggleActivationRequest} patchApiOrganizationPlaceSurveysToggleActivationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceSurveysApi
     */
    public patchApiOrganizationPlaceSurveysToggleActivation(placeUuid: string, surveyUuid: string, patchApiOrganizationPlaceSurveysToggleActivationRequest: PatchApiOrganizationPlaceSurveysToggleActivationRequest, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceSurveysApiFp(this.configuration).patchApiOrganizationPlaceSurveysToggleActivation(placeUuid, surveyUuid, patchApiOrganizationPlaceSurveysToggleActivationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} placeUuid 
     * @param {OrganizationPlaceSurveyCreate} organizationPlaceSurveyCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceSurveysApi
     */
    public postApiOrganizationPlaceSurveysCreate(placeUuid: string, organizationPlaceSurveyCreate: OrganizationPlaceSurveyCreate, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceSurveysApiFp(this.configuration).postApiOrganizationPlaceSurveysCreate(placeUuid, organizationPlaceSurveyCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} placeUuid 
     * @param {string} surveyUuid 
     * @param {OrganizationPlaceSurveyUpdate} organizationPlaceSurveyUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceSurveysApi
     */
    public putApiOrganizationPlaceSurveysUpdate(placeUuid: string, surveyUuid: string, organizationPlaceSurveyUpdate: OrganizationPlaceSurveyUpdate, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceSurveysApiFp(this.configuration).putApiOrganizationPlaceSurveysUpdate(placeUuid, surveyUuid, organizationPlaceSurveyUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiOrganizationPlaceSurveysListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiOrganizationPlaceSurveysListOrderEnum = typeof GetApiOrganizationPlaceSurveysListOrderEnum[keyof typeof GetApiOrganizationPlaceSurveysListOrderEnum];


/**
 * OrganizationPlaceWorkingHoursApi - axios parameter creator
 * @export
 */
export const OrganizationPlaceWorkingHoursApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {string} [date] Date to check (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceWorkingHoursCheckDate: async (uuid: string, date?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getApiOrganizationPlaceWorkingHoursCheckDate', 'uuid', uuid)
            const localVarPath = `/api/organization-place/{uuid}/working-hours/check-date`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceWorkingHoursGet: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getApiOrganizationPlaceWorkingHoursGet', 'uuid', uuid)
            const localVarPath = `/api/organization-place/{uuid}/working-hours`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationPlaceWorkingHoursReset: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('postApiOrganizationPlaceWorkingHoursReset', 'uuid', uuid)
            const localVarPath = `/api/organization-place/{uuid}/working-hours/reset`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationPlaceWorkingHoursUpdate: async (uuid: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('putApiOrganizationPlaceWorkingHoursUpdate', 'uuid', uuid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('putApiOrganizationPlaceWorkingHoursUpdate', 'body', body)
            const localVarPath = `/api/organization-place/{uuid}/working-hours`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationPlaceWorkingHoursApi - functional programming interface
 * @export
 */
export const OrganizationPlaceWorkingHoursApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationPlaceWorkingHoursApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {string} [date] Date to check (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationPlaceWorkingHoursCheckDate(uuid: string, date?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationPlaceWorkingHoursCheckDate(uuid, date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceWorkingHoursApi.getApiOrganizationPlaceWorkingHoursCheckDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationPlaceWorkingHoursGet(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceWorkingHours>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationPlaceWorkingHoursGet(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceWorkingHoursApi.getApiOrganizationPlaceWorkingHoursGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiOrganizationPlaceWorkingHoursReset(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiOrganizationPlaceWorkingHoursReset(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceWorkingHoursApi.postApiOrganizationPlaceWorkingHoursReset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiOrganizationPlaceWorkingHoursUpdate(uuid: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiOrganizationPlaceWorkingHoursUpdate(uuid, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlaceWorkingHoursApi.putApiOrganizationPlaceWorkingHoursUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationPlaceWorkingHoursApi - factory interface
 * @export
 */
export const OrganizationPlaceWorkingHoursApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationPlaceWorkingHoursApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {string} [date] Date to check (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceWorkingHoursCheckDate(uuid: string, date?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getApiOrganizationPlaceWorkingHoursCheckDate(uuid, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlaceWorkingHoursGet(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceWorkingHours> {
            return localVarFp.getApiOrganizationPlaceWorkingHoursGet(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationPlaceWorkingHoursReset(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.postApiOrganizationPlaceWorkingHoursReset(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationPlaceWorkingHoursUpdate(uuid: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.putApiOrganizationPlaceWorkingHoursUpdate(uuid, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationPlaceWorkingHoursApi - object-oriented interface
 * @export
 * @class OrganizationPlaceWorkingHoursApi
 * @extends {BaseAPI}
 */
export class OrganizationPlaceWorkingHoursApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {string} [date] Date to check (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceWorkingHoursApi
     */
    public getApiOrganizationPlaceWorkingHoursCheckDate(uuid: string, date?: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceWorkingHoursApiFp(this.configuration).getApiOrganizationPlaceWorkingHoursCheckDate(uuid, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceWorkingHoursApi
     */
    public getApiOrganizationPlaceWorkingHoursGet(uuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceWorkingHoursApiFp(this.configuration).getApiOrganizationPlaceWorkingHoursGet(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceWorkingHoursApi
     */
    public postApiOrganizationPlaceWorkingHoursReset(uuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceWorkingHoursApiFp(this.configuration).postApiOrganizationPlaceWorkingHoursReset(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlaceWorkingHoursApi
     */
    public putApiOrganizationPlaceWorkingHoursUpdate(uuid: string, body: object, options?: RawAxiosRequestConfig) {
        return OrganizationPlaceWorkingHoursApiFp(this.configuration).putApiOrganizationPlaceWorkingHoursUpdate(uuid, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationPlacesApi - axios parameter creator
 * @export
 */
export const OrganizationPlacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationPlacesDelete: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteApiOrganizationPlacesDelete', 'uuid', uuid)
            const localVarPath = `/api/organization-place/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlacesGet: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getApiOrganizationPlacesGet', 'uuid', uuid)
            const localVarPath = `/api/organization-place/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiOrganizationPlacesListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {string} [organization] Organization UUID to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlacesList: async (page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlacesListOrderEnum, organization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organization-place`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationPlaceCreate} organizationPlaceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationPlacesCreate: async (organizationPlaceCreate: OrganizationPlaceCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationPlaceCreate' is not null or undefined
            assertParamExists('postApiOrganizationPlacesCreate', 'organizationPlaceCreate', organizationPlaceCreate)
            const localVarPath = `/api/organization-place`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationPlaceCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {OrganizationPlaceUpdate} organizationPlaceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationPlacesUpdate: async (uuid: string, organizationPlaceUpdate: OrganizationPlaceUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('putApiOrganizationPlacesUpdate', 'uuid', uuid)
            // verify required parameter 'organizationPlaceUpdate' is not null or undefined
            assertParamExists('putApiOrganizationPlacesUpdate', 'organizationPlaceUpdate', organizationPlaceUpdate)
            const localVarPath = `/api/organization-place/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationPlaceUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationPlacesApi - functional programming interface
 * @export
 */
export const OrganizationPlacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationPlacesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiOrganizationPlacesDelete(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiOrganizationPlacesDelete(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlacesApi.deleteApiOrganizationPlacesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationPlacesGet(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationPlacesGet(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlacesApi.getApiOrganizationPlacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiOrganizationPlacesListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {string} [organization] Organization UUID to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationPlacesList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlacesListOrderEnum, organization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlaceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationPlacesList(page, limit, search, sort, order, organization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlacesApi.getApiOrganizationPlacesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OrganizationPlaceCreate} organizationPlaceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiOrganizationPlacesCreate(organizationPlaceCreate: OrganizationPlaceCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiOrganizationPlacesCreate(organizationPlaceCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlacesApi.postApiOrganizationPlacesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {OrganizationPlaceUpdate} organizationPlaceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiOrganizationPlacesUpdate(uuid: string, organizationPlaceUpdate: OrganizationPlaceUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPlace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiOrganizationPlacesUpdate(uuid, organizationPlaceUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationPlacesApi.putApiOrganizationPlacesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationPlacesApi - factory interface
 * @export
 */
export const OrganizationPlacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationPlacesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationPlacesDelete(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApiOrganizationPlacesDelete(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlacesGet(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlace> {
            return localVarFp.getApiOrganizationPlacesGet(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiOrganizationPlacesListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {string} [organization] Organization UUID to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationPlacesList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlacesListOrderEnum, organization?: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlaceList> {
            return localVarFp.getApiOrganizationPlacesList(page, limit, search, sort, order, organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationPlaceCreate} organizationPlaceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationPlacesCreate(organizationPlaceCreate: OrganizationPlaceCreate, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlace> {
            return localVarFp.postApiOrganizationPlacesCreate(organizationPlaceCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {OrganizationPlaceUpdate} organizationPlaceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationPlacesUpdate(uuid: string, organizationPlaceUpdate: OrganizationPlaceUpdate, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPlace> {
            return localVarFp.putApiOrganizationPlacesUpdate(uuid, organizationPlaceUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationPlacesApi - object-oriented interface
 * @export
 * @class OrganizationPlacesApi
 * @extends {BaseAPI}
 */
export class OrganizationPlacesApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlacesApi
     */
    public deleteApiOrganizationPlacesDelete(uuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlacesApiFp(this.configuration).deleteApiOrganizationPlacesDelete(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlacesApi
     */
    public getApiOrganizationPlacesGet(uuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlacesApiFp(this.configuration).getApiOrganizationPlacesGet(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [search] Search term
     * @param {string} [sort] Field to sort by (e.g. name)
     * @param {GetApiOrganizationPlacesListOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {string} [organization] Organization UUID to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlacesApi
     */
    public getApiOrganizationPlacesList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationPlacesListOrderEnum, organization?: string, options?: RawAxiosRequestConfig) {
        return OrganizationPlacesApiFp(this.configuration).getApiOrganizationPlacesList(page, limit, search, sort, order, organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrganizationPlaceCreate} organizationPlaceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlacesApi
     */
    public postApiOrganizationPlacesCreate(organizationPlaceCreate: OrganizationPlaceCreate, options?: RawAxiosRequestConfig) {
        return OrganizationPlacesApiFp(this.configuration).postApiOrganizationPlacesCreate(organizationPlaceCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {OrganizationPlaceUpdate} organizationPlaceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationPlacesApi
     */
    public putApiOrganizationPlacesUpdate(uuid: string, organizationPlaceUpdate: OrganizationPlaceUpdate, options?: RawAxiosRequestConfig) {
        return OrganizationPlacesApiFp(this.configuration).putApiOrganizationPlacesUpdate(uuid, organizationPlaceUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiOrganizationPlacesListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiOrganizationPlacesListOrderEnum = typeof GetApiOrganizationPlacesListOrderEnum[keyof typeof GetApiOrganizationPlacesListOrderEnum];


/**
 * OrganizationUsersApi - axios parameter creator
 * @export
 */
export const OrganizationUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationUsersDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteApiOrganizationUsersDelete', 'id', id)
            const localVarPath = `/api/organization-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersByOrganizationOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersByOrganization: async (uuid: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByOrganizationOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getApiOrganizationUsersByOrganization', 'uuid', uuid)
            const localVarPath = `/api/organization-user/organization/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersByUserOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersByUser: async (id: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByUserOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiOrganizationUsersByUser', 'id', id)
            const localVarPath = `/api/organization-user/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiOrganizationUsersGet', 'id', id)
            const localVarPath = `/api/organization-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [organization] Organization UUID
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersList: async (page?: number, limit?: number, search?: string, organization?: string, sort?: string, order?: GetApiOrganizationUsersListOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organization-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationUserCreate} organizationUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationUsersCreate: async (organizationUserCreate: OrganizationUserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationUserCreate' is not null or undefined
            assertParamExists('postApiOrganizationUsersCreate', 'organizationUserCreate', organizationUserCreate)
            const localVarPath = `/api/organization-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationUserCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {OrganizationUserUpdate} organizationUserUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationUsersUpdate: async (id: string, organizationUserUpdate: OrganizationUserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putApiOrganizationUsersUpdate', 'id', id)
            // verify required parameter 'organizationUserUpdate' is not null or undefined
            assertParamExists('putApiOrganizationUsersUpdate', 'organizationUserUpdate', organizationUserUpdate)
            const localVarPath = `/api/organization-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationUserUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationUsersApi - functional programming interface
 * @export
 */
export const OrganizationUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiOrganizationUsersDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiOrganizationUsersDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.deleteApiOrganizationUsersDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersByOrganizationOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationUsersByOrganization(uuid: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByOrganizationOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationUsersByOrganization(uuid, page, limit, sort, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.getApiOrganizationUsersByOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersByUserOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationUsersByUser(id: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByUserOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationUsersByUser(id, page, limit, sort, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.getApiOrganizationUsersByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationUsersGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationUsersGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.getApiOrganizationUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [organization] Organization UUID
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationUsersList(page?: number, limit?: number, search?: string, organization?: string, sort?: string, order?: GetApiOrganizationUsersListOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationUsersList(page, limit, search, organization, sort, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.getApiOrganizationUsersList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OrganizationUserCreate} organizationUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiOrganizationUsersCreate(organizationUserCreate: OrganizationUserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiOrganizationUsersCreate(organizationUserCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.postApiOrganizationUsersCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {OrganizationUserUpdate} organizationUserUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiOrganizationUsersUpdate(id: string, organizationUserUpdate: OrganizationUserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiOrganizationUsersUpdate(id, organizationUserUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationUsersApi.putApiOrganizationUsersUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationUsersApi - factory interface
 * @export
 */
export const OrganizationUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationUsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationUsersDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApiOrganizationUsersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersByOrganizationOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersByOrganization(uuid: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByOrganizationOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUserList> {
            return localVarFp.getApiOrganizationUsersByOrganization(uuid, page, limit, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersByUserOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersByUser(id: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByUserOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUserList> {
            return localVarFp.getApiOrganizationUsersByUser(id, page, limit, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUser> {
            return localVarFp.getApiOrganizationUsersGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [organization] Organization UUID
         * @param {string} [sort] Field to sort by
         * @param {GetApiOrganizationUsersListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationUsersList(page?: number, limit?: number, search?: string, organization?: string, sort?: string, order?: GetApiOrganizationUsersListOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUserList> {
            return localVarFp.getApiOrganizationUsersList(page, limit, search, organization, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationUserCreate} organizationUserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationUsersCreate(organizationUserCreate: OrganizationUserCreate, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUser> {
            return localVarFp.postApiOrganizationUsersCreate(organizationUserCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {OrganizationUserUpdate} organizationUserUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationUsersUpdate(id: string, organizationUserUpdate: OrganizationUserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUser> {
            return localVarFp.putApiOrganizationUsersUpdate(id, organizationUserUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationUsersApi - object-oriented interface
 * @export
 * @class OrganizationUsersApi
 * @extends {BaseAPI}
 */
export class OrganizationUsersApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public deleteApiOrganizationUsersDelete(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).deleteApiOrganizationUsersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [sort] Field to sort by
     * @param {GetApiOrganizationUsersByOrganizationOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public getApiOrganizationUsersByOrganization(uuid: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByOrganizationOrderEnum, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).getApiOrganizationUsersByOrganization(uuid, page, limit, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [sort] Field to sort by
     * @param {GetApiOrganizationUsersByUserOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public getApiOrganizationUsersByUser(id: string, page?: number, limit?: number, sort?: string, order?: GetApiOrganizationUsersByUserOrderEnum, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).getApiOrganizationUsersByUser(id, page, limit, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public getApiOrganizationUsersGet(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).getApiOrganizationUsersGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [search] Search term
     * @param {string} [organization] Organization UUID
     * @param {string} [sort] Field to sort by
     * @param {GetApiOrganizationUsersListOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public getApiOrganizationUsersList(page?: number, limit?: number, search?: string, organization?: string, sort?: string, order?: GetApiOrganizationUsersListOrderEnum, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).getApiOrganizationUsersList(page, limit, search, organization, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrganizationUserCreate} organizationUserCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public postApiOrganizationUsersCreate(organizationUserCreate: OrganizationUserCreate, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).postApiOrganizationUsersCreate(organizationUserCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {OrganizationUserUpdate} organizationUserUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUsersApi
     */
    public putApiOrganizationUsersUpdate(id: string, organizationUserUpdate: OrganizationUserUpdate, options?: RawAxiosRequestConfig) {
        return OrganizationUsersApiFp(this.configuration).putApiOrganizationUsersUpdate(id, organizationUserUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiOrganizationUsersByOrganizationOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiOrganizationUsersByOrganizationOrderEnum = typeof GetApiOrganizationUsersByOrganizationOrderEnum[keyof typeof GetApiOrganizationUsersByOrganizationOrderEnum];
/**
 * @export
 */
export const GetApiOrganizationUsersByUserOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiOrganizationUsersByUserOrderEnum = typeof GetApiOrganizationUsersByUserOrderEnum[keyof typeof GetApiOrganizationUsersByUserOrderEnum];
/**
 * @export
 */
export const GetApiOrganizationUsersListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiOrganizationUsersListOrderEnum = typeof GetApiOrganizationUsersListOrderEnum[keyof typeof GetApiOrganizationUsersListOrderEnum];


/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationsDelete: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteApiOrganizationsDelete', 'uuid', uuid)
            const localVarPath = `/api/organization/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationsGet: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getApiOrganizationsGet', 'uuid', uuid)
            const localVarPath = `/api/organization/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiOrganizationsListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationsList: async (page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationsListOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationsCreate: async (organizationCreate: OrganizationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreate' is not null or undefined
            assertParamExists('postApiOrganizationsCreate', 'organizationCreate', organizationCreate)
            const localVarPath = `/api/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationsUpdate: async (uuid: string, organizationUpdate: OrganizationUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('putApiOrganizationsUpdate', 'uuid', uuid)
            // verify required parameter 'organizationUpdate' is not null or undefined
            assertParamExists('putApiOrganizationsUpdate', 'organizationUpdate', organizationUpdate)
            const localVarPath = `/api/organization/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiOrganizationsDelete(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiOrganizationsDelete(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.deleteApiOrganizationsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationsGet(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationsGet(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getApiOrganizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiOrganizationsListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiOrganizationsList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationsListOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiOrganizationsList(page, limit, search, sort, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getApiOrganizationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiOrganizationsCreate(organizationCreate: OrganizationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiOrganizationsCreate(organizationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.postApiOrganizationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiOrganizationsUpdate(uuid: string, organizationUpdate: OrganizationUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiOrganizationsUpdate(uuid, organizationUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.putApiOrganizationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiOrganizationsDelete(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApiOrganizationsDelete(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationsGet(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.getApiOrganizationsGet(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiOrganizationsListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiOrganizationsList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationsListOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationList> {
            return localVarFp.getApiOrganizationsList(page, limit, search, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiOrganizationsCreate(organizationCreate: OrganizationCreate, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.postApiOrganizationsCreate(organizationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiOrganizationsUpdate(uuid: string, organizationUpdate: OrganizationUpdate, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.putApiOrganizationsUpdate(uuid, organizationUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteApiOrganizationsDelete(uuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).deleteApiOrganizationsDelete(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getApiOrganizationsGet(uuid: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getApiOrganizationsGet(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [search] Search term
     * @param {string} [sort] Field to sort by (e.g. name)
     * @param {GetApiOrganizationsListOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getApiOrganizationsList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiOrganizationsListOrderEnum, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getApiOrganizationsList(page, limit, search, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrganizationCreate} organizationCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public postApiOrganizationsCreate(organizationCreate: OrganizationCreate, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).postApiOrganizationsCreate(organizationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {OrganizationUpdate} organizationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public putApiOrganizationsUpdate(uuid: string, organizationUpdate: OrganizationUpdate, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).putApiOrganizationsUpdate(uuid, organizationUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiOrganizationsListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiOrganizationsListOrderEnum = typeof GetApiOrganizationsListOrderEnum[keyof typeof GetApiOrganizationsListOrderEnum];


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiUsersDelete: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteApiUsersDelete', 'uuid', uuid)
            const localVarPath = `/api/user/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsersGet: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getApiUsersGet', 'uuid', uuid)
            const localVarPath = `/api/user/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiUsersListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsersList: async (page?: number, limit?: number, search?: string, sort?: string, order?: GetApiUsersListOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersCreate: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('postApiUsersCreate', 'userCreate', userCreate)
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiUsersUpdate: async (uuid: string, userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('putApiUsersUpdate', 'uuid', uuid)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('putApiUsersUpdate', 'userUpdate', userUpdate)
            const localVarPath = `/api/user/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiUsersDelete(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiUsersDelete(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteApiUsersDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUsersGet(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiUsersGet(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getApiUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiUsersListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUsersList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiUsersListOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiUsersList(page, limit, search, sort, order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getApiUsersList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiUsersCreate(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiUsersCreate(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.postApiUsersCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiUsersUpdate(uuid: string, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiUsersUpdate(uuid, userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.putApiUsersUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiUsersDelete(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteApiUsersDelete(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsersGet(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getApiUsersGet(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {string} [search] Search term
         * @param {string} [sort] Field to sort by (e.g. name)
         * @param {GetApiUsersListOrderEnum} [order] Sort direction (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsersList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiUsersListOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<UserList> {
            return localVarFp.getApiUsersList(page, limit, search, sort, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiUsersCreate(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.postApiUsersCreate(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiUsersUpdate(uuid: string, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.putApiUsersUpdate(uuid, userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteApiUsersDelete(uuid: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteApiUsersDelete(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getApiUsersGet(uuid: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getApiUsersGet(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {string} [search] Search term
     * @param {string} [sort] Field to sort by (e.g. name)
     * @param {GetApiUsersListOrderEnum} [order] Sort direction (ASC or DESC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getApiUsersList(page?: number, limit?: number, search?: string, sort?: string, order?: GetApiUsersListOrderEnum, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getApiUsersList(page, limit, search, sort, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public postApiUsersCreate(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).postApiUsersCreate(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public putApiUsersUpdate(uuid: string, userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).putApiUsersUpdate(uuid, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiUsersListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetApiUsersListOrderEnum = typeof GetApiUsersListOrderEnum[keyof typeof GetApiUsersListOrderEnum];


